From: "Daniel Knoppel (Phusion)" <daniel@phusion.nl>
Date: Wed, 11 Oct 2017 15:55:07 +0200
Subject: arbitrary file read via REVISION symlink
Origin: https://github.com/phusion/passenger/commit/4043718264095cde6623c2cbe8c644541036d7bf,
 https://github.com/phusion/passenger/commit/947af424330f5d5f5006860b2f0140bbba153e42
Bug-Debian-Security: https://security-tracker.debian.org/tracker/CVE-2017-16355
Bug-Debian: https://bugs.debian.org/884463

[carnil: false is actually a defined macro, but the key part of the fix is the emoval of the call to inferApplicationInfo() to adress the issue.
---
 src/agent/Core/SpawningKit/Spawner.h | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

--- a/src/agent/Core/SpawningKit/Spawner.h
+++ b/src/agent/Core/SpawningKit/Spawner.h
@@ -719,7 +719,6 @@ protected:
 		prepareChroot(info, options);
 		info.userSwitching = prepareUserSwitching(options);
 		prepareSwitchingWorkingDirectory(info, options);
-		inferApplicationInfo(info);
 		return info;
 	}
 
@@ -773,49 +772,6 @@ protected:
 		assert(info.appRootPathsInsideChroot.back() == info.appRootInsideChroot);
 	}
 
-	void inferApplicationInfo(SpawnPreparationInfo &info) const {
-		info.codeRevision = readFromRevisionFile(info);
-		if (info.codeRevision.empty()) {
-			info.codeRevision = inferCodeRevisionFromCapistranoSymlink(info);
-		}
-	}
-
-	string readFromRevisionFile(const SpawnPreparationInfo &info) const {
-		string filename = info.appRoot + "/REVISION";
-		try {
-			if (fileExists(filename)) {
-				return strip(readAll(filename));
-			}
-		} catch (const SystemException &e) {
-			P_WARN("Cannot access " << filename << ": " << e.what());
-		}
-		return string();
-	}
-
-	string inferCodeRevisionFromCapistranoSymlink(const SpawnPreparationInfo &info) const {
-		if (extractBaseName(info.appRoot) == "current") {
-			char buf[PATH_MAX + 1];
-			ssize_t ret;
-
-			do {
-				ret = readlink(info.appRoot.c_str(), buf, PATH_MAX);
-			} while (ret == -1 && errno == EINTR);
-			if (ret == -1) {
-				if (errno == EINVAL) {
-					return string();
-				} else {
-					int e = errno;
-					P_WARN("Cannot read symlink " << info.appRoot << ": " << strerror(e));
-				}
-			}
-
-			buf[ret] = '\0';
-			return extractBaseName(buf);
-		} else {
-			return string();
-		}
-	}
-
 	bool shouldLoadShellEnvvars(const Options &options, const SpawnPreparationInfo &preparation) const {
 		if (options.loadShellEnvvars) {
 			string shellName = extractBaseName(preparation.userSwitching.shell);
